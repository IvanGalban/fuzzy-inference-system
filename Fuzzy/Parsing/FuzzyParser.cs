//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Me\Cybernetic\ComputerScience\4Year\2Semestre\SIM\Proyectos\3. Logica Difusa\Code\FuzzySolution\Fuzzy\Parsing\Fuzzy.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FuzzyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, NUMBER=20, ID=21, COMMENT=22, WS=23;
	public const int
		RULE_compileUnit = 0, RULE_fuzzy_rule = 1, RULE_logic_expr = 2, RULE_arithmetic_expr = 3;
	public static readonly string[] ruleNames = {
		"compileUnit", "fuzzy_rule", "logic_expr", "arithmetic_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "'model'", "']'", "'t-norm'", "'t-conorm'", "'defuzzy'", 
		"'then'", "'='", "'is'", "'('", "')'", "'and'", "'or'", "'not'", "'**'", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NUMBER", "ID", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fuzzy.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FuzzyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FuzzyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FuzzyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
	 
		public CompileUnitContext() { }
		public virtual void CopyFrom(CompileUnitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FileContext : CompileUnitContext {
		public ITerminalNode[] ID() { return GetTokens(FuzzyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FuzzyParser.ID, i);
		}
		public ITerminalNode Eof() { return GetToken(FuzzyParser.Eof, 0); }
		public Fuzzy_ruleContext[] fuzzy_rule() {
			return GetRuleContexts<Fuzzy_ruleContext>();
		}
		public Fuzzy_ruleContext fuzzy_rule(int i) {
			return GetRuleContext<Fuzzy_ruleContext>(i);
		}
		public FileContext(CompileUnitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			_localctx = new FileContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; Match(T__0);
			State = 9; Match(T__1);
			State = 10; Match(T__2);
			State = 11; Match(ID);
			State = 12; Match(T__0);
			State = 13; Match(T__3);
			State = 14; Match(T__2);
			State = 15; Match(ID);
			State = 16; Match(T__0);
			State = 17; Match(T__4);
			State = 18; Match(T__2);
			State = 19; Match(ID);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 20; Match(T__0);
				State = 21; Match(T__5);
				State = 22; Match(T__2);
				State = 23; Match(ID);
				}
			}

			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26; fuzzy_rule();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__13) | (1L << ID))) != 0) );
			State = 31; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fuzzy_ruleContext : ParserRuleContext {
		public Fuzzy_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fuzzy_rule; } }
	 
		public Fuzzy_ruleContext() { }
		public virtual void CopyFrom(Fuzzy_ruleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SRuleContext : Fuzzy_ruleContext {
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(FuzzyParser.ID, 0); }
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public SRuleContext(Fuzzy_ruleContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MTRuleContext : Fuzzy_ruleContext {
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(FuzzyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FuzzyParser.ID, i);
		}
		public MTRuleContext(Fuzzy_ruleContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMTRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fuzzy_ruleContext fuzzy_rule() {
		Fuzzy_ruleContext _localctx = new Fuzzy_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_fuzzy_rule);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new SRuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; logic_expr(0);
				State = 34; Match(T__6);
				State = 35; Match(ID);
				State = 36; Match(T__7);
				State = 37; arithmetic_expr(0);
				}
				break;
			case 2:
				_localctx = new MTRuleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; logic_expr(0);
				State = 40; Match(T__6);
				State = 41; Match(ID);
				State = 42; Match(T__8);
				State = 43; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_exprContext : ParserRuleContext {
		public Logic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_expr; } }
	 
		public Logic_exprContext() { }
		public virtual void CopyFrom(Logic_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LAndContext : Logic_exprContext {
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public LAndContext(Logic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LVarValueContext : Logic_exprContext {
		public ITerminalNode[] ID() { return GetTokens(FuzzyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FuzzyParser.ID, i);
		}
		public LVarValueContext(Logic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLVarValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOrContext : Logic_exprContext {
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public LOrContext(Logic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LNotContext : Logic_exprContext {
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public LNotContext(Logic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LParensContext : Logic_exprContext {
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public LParensContext(Logic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_exprContext logic_expr() {
		return logic_expr(0);
	}

	private Logic_exprContext logic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logic_exprContext _localctx = new Logic_exprContext(Context, _parentState);
		Logic_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logic_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new LVarValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 48; Match(ID);
				State = 49; Match(T__8);
				State = 50; Match(ID);
				}
				break;
			case T__9:
				{
				_localctx = new LParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(T__9);
				State = 52; logic_expr(0);
				State = 53; Match(T__10);
				}
				break;
			case T__13:
				{
				_localctx = new LNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55; Match(T__13);
				State = 56; logic_expr(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 65;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new LAndContext(new Logic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
						State = 59;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 60; Match(T__11);
						State = 61; logic_expr(4);
						}
						break;
					case 2:
						{
						_localctx = new LOrContext(new Logic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
						State = 62;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 63; Match(T__12);
						State = 64; logic_expr(3);
						}
						break;
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Arithmetic_exprContext : ParserRuleContext {
		public Arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expr; } }
	 
		public Arithmetic_exprContext() { }
		public virtual void CopyFrom(Arithmetic_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AParensContext : Arithmetic_exprContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public AParensContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AVarContext : Arithmetic_exprContext {
		public ITerminalNode ID() { return GetToken(FuzzyParser.ID, 0); }
		public AVarContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AArithmeticContext : Arithmetic_exprContext {
		public IToken op;
		public Arithmetic_exprContext[] arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public AArithmeticContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANegContext : Arithmetic_exprContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public ANegContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANumberContext : Arithmetic_exprContext {
		public ITerminalNode NUMBER() { return GetToken(FuzzyParser.NUMBER, 0); }
		public ANumberContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFuzzyVisitor<TResult> typedVisitor = visitor as IFuzzyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_exprContext arithmetic_expr() {
		return arithmetic_expr(0);
	}

	private Arithmetic_exprContext arithmetic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_exprContext _localctx = new Arithmetic_exprContext(Context, _parentState);
		Arithmetic_exprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_arithmetic_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new AVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 71; Match(ID);
				}
				break;
			case NUMBER:
				{
				_localctx = new ANumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72; Match(NUMBER);
				}
				break;
			case T__9:
				{
				_localctx = new AParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73; Match(T__9);
				State = 74; arithmetic_expr(0);
				State = 75; Match(T__10);
				}
				break;
			case T__18:
				{
				_localctx = new ANegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77; Match(T__18);
				State = 78; arithmetic_expr(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new AArithmeticContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 81;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 82; ((AArithmeticContext)_localctx).op = Match(T__14);
						State = 83; arithmetic_expr(5);
						}
						break;
					case 2:
						{
						_localctx = new AArithmeticContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 84;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 85;
						((AArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
							((AArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 86; arithmetic_expr(4);
						}
						break;
					case 3:
						{
						_localctx = new AArithmeticContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 87;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 88;
						((AArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
							((AArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 89; arithmetic_expr(3);
						}
						break;
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return logic_expr_sempred((Logic_exprContext)_localctx, predIndex);
		case 3: return arithmetic_expr_sempred((Arithmetic_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logic_expr_sempred(Logic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool arithmetic_expr_sempred(Arithmetic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\x62', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x1B', '\n', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'\x1E', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1F', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x30', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '<', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x44', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', 'G', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'R', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', ']', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '`', '\v', '\x5', '\x3', '\x5', 
		'\x2', '\x4', '\x6', '\b', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x4', 
		'\x3', '\x2', '\x12', '\x13', '\x3', '\x2', '\x14', '\x15', '\x2', 'j', 
		'\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ';', '\x3', '\x2', '\x2', '\x2', '\b', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\v', '\a', '\x3', '\x2', '\x2', '\v', '\f', '\a', 
		'\x4', '\x2', '\x2', '\f', '\r', '\a', '\x5', '\x2', '\x2', '\r', '\xE', 
		'\a', '\x17', '\x2', '\x2', '\xE', '\xF', '\a', '\x3', '\x2', '\x2', '\xF', 
		'\x10', '\a', '\x6', '\x2', '\x2', '\x10', '\x11', '\a', '\x5', '\x2', 
		'\x2', '\x11', '\x12', '\a', '\x17', '\x2', '\x2', '\x12', '\x13', '\a', 
		'\x3', '\x2', '\x2', '\x13', '\x14', '\a', '\a', '\x2', '\x2', '\x14', 
		'\x15', '\a', '\x5', '\x2', '\x2', '\x15', '\x1A', '\a', '\x17', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\x3', '\x2', '\x2', '\x17', '\x18', '\a', 
		'\b', '\x2', '\x2', '\x18', '\x19', '\a', '\x5', '\x2', '\x2', '\x19', 
		'\x1B', '\a', '\x17', '\x2', '\x2', '\x1A', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\a', '\x2', '\x2', '\x3', '\"', '\x3', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\x5', '\x6', '\x4', '\x2', '$', '%', '\a', '\t', '\x2', '\x2', '%', 
		'&', '\a', '\x17', '\x2', '\x2', '&', '\'', '\a', '\n', '\x2', '\x2', 
		'\'', '(', '\x5', '\b', '\x5', '\x2', '(', '\x30', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', '*', '+', '\a', '\t', '\x2', 
		'\x2', '+', ',', '\a', '\x17', '\x2', '\x2', ',', '-', '\a', '\v', '\x2', 
		'\x2', '-', '.', '\a', '\x17', '\x2', '\x2', '.', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '/', '#', '\x3', '\x2', '\x2', '\x2', '/', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\b', '\x4', '\x1', '\x2', '\x32', '\x33', '\a', '\x17', '\x2', '\x2', 
		'\x33', '\x34', '\a', '\v', '\x2', '\x2', '\x34', '<', '\a', '\x17', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\f', '\x2', '\x2', '\x36', '\x37', '\x5', 
		'\x6', '\x4', '\x2', '\x37', '\x38', '\a', '\r', '\x2', '\x2', '\x38', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x10', '\x2', '\x2', 
		':', '<', '\x5', '\x6', '\x4', '\x3', ';', '\x31', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x45', '\x3', '\x2', '\x2', '\x2', '=', '>', '\f', 
		'\x5', '\x2', '\x2', '>', '?', '\a', '\xE', '\x2', '\x2', '?', '\x44', 
		'\x5', '\x6', '\x4', '\x6', '@', '\x41', '\f', '\x4', '\x2', '\x2', '\x41', 
		'\x42', '\a', '\xF', '\x2', '\x2', '\x42', '\x44', '\x5', '\x6', '\x4', 
		'\x5', '\x43', '=', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\b', '\x5', '\x1', '\x2', 'I', 'R', '\a', '\x17', '\x2', 
		'\x2', 'J', 'R', '\a', '\x16', '\x2', '\x2', 'K', 'L', '\a', '\f', '\x2', 
		'\x2', 'L', 'M', '\x5', '\b', '\x5', '\x2', 'M', 'N', '\a', '\r', '\x2', 
		'\x2', 'N', 'R', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x15', '\x2', 
		'\x2', 'P', 'R', '\x5', '\b', '\x5', '\x3', 'Q', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'J', '\x3', '\x2', '\x2', '\x2', 'Q', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', '^', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\f', '\x6', '\x2', '\x2', 'T', 'U', '\a', '\x11', '\x2', 
		'\x2', 'U', ']', '\x5', '\b', '\x5', '\a', 'V', 'W', '\f', '\x5', '\x2', 
		'\x2', 'W', 'X', '\t', '\x2', '\x2', '\x2', 'X', ']', '\x5', '\b', '\x5', 
		'\x6', 'Y', 'Z', '\f', '\x4', '\x2', '\x2', 'Z', '[', '\t', '\x3', '\x2', 
		'\x2', '[', ']', '\x5', '\b', '\x5', '\x5', '\\', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'V', '\x3', '\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2', 
		'\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\t', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\v', 
		'\x1A', '\x1F', '/', ';', '\x43', '\x45', 'Q', '\\', '^',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
